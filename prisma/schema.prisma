// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  CLIENT
  ADMIN
}
enum CurrentStatus {
  INPROGRESS
  DRIED
  INITIAL
}

type Superintendent{
  name String
  mobileNo String
  email String
}

model Admin {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  email           String  @unique
  image           String?
  password        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  firstName       String
  lastName        String

}

model Users {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  email           String  @unique
  image           String?
  password        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  firstName       String
  lastName        String
  role            Role @default(USER)
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  email           String  @unique
  image           String?
  password        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  firstName       String
  lastName        String
  adminId         String @db.ObjectId

}

model Client {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  contactPerson      String
  mobile             String
  website            String?  
  address            String
  image              String?
  field              Field[]
  createdDate        DateTime @default(now())


  @@unique([mobile])
}

model Field {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  numberOfWells Int
  name      String
  longitude Float
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  latitude  Float
  website   String
  superintendent Superintendent
  clientId  String @db.ObjectId
  well      Well[]

  client Client @relation(fields: [clientId], references: [id])
}

model Well {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  longitude       Float
  latitude        Float
  treeSpecs       Float
  status          CurrentStatus @default(INITIAL)
  fieldId         String @db.ObjectId
  spudDate        DateTime
  firstProductionDate    DateTime
  initialCompletionDate  DateTime
  bitSize         Float
  casting         Float
  totalDepth      Float
  turbingSize     Float
  flowStation     String
  image           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  project         Project[]

  field  Field     @relation(fields: [fieldId], references: [id])
}

model Project {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  wellId          String @db.ObjectId
  startDate       DateTime
  endDate         DateTime
  rig             String
  description     String
  image           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  report          Report[]

  well Well       @relation(fields: [wellId], references: [id])
}

model Report {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  projectId       String @db.ObjectId
  author          String
  image           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  project Project      @relation(fields: [projectId], references: [id])
}

model Recycled{
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  file   String
  name   String
}